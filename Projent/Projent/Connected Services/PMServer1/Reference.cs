//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This code was auto-generated by Microsoft.VisualStudio.ServiceReference.Platforms, version 17.0.32408.312
// 
namespace Projent.PMServer1 {
    using System.Runtime.Serialization;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="User", Namespace="http://schemas.datacontract.org/2004/07/PMService1.Model")]
    public partial class User : object, System.ComponentModel.INotifyPropertyChanged {
        
        private string EmailField;
        
        private string NameField;
        
        private string PasswordField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Email {
            get {
                return this.EmailField;
            }
            set {
                if ((object.ReferenceEquals(this.EmailField, value) != true)) {
                    this.EmailField = value;
                    this.RaisePropertyChanged("Email");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Password {
            get {
                return this.PasswordField;
            }
            set {
                if ((object.ReferenceEquals(this.PasswordField, value) != true)) {
                    this.PasswordField = value;
                    this.RaisePropertyChanged("Password");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Status", Namespace="http://schemas.datacontract.org/2004/07/PMService1")]
    public enum Status : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Offline = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Online = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Idle = 2,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Busy = 3,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Invisible = 4,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="PMServer1.IMainService")]
    public interface IMainService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMainService/IntializeDatabaseService", ReplyAction="http://tempuri.org/IMainService/IntializeDatabaseServiceResponse")]
        System.Threading.Tasks.Task IntializeDatabaseServiceAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMainService/GetSqliteVersion", ReplyAction="http://tempuri.org/IMainService/GetSqliteVersionResponse")]
        System.Threading.Tasks.Task GetSqliteVersionAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMainService/RequestState", ReplyAction="http://tempuri.org/IMainService/RequestStateResponse")]
        System.Threading.Tasks.Task<bool> RequestStateAsync(string DeviceID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMainService/SetUserStatus", ReplyAction="http://tempuri.org/IMainService/SetUserStatusResponse")]
        System.Threading.Tasks.Task<bool> SetUserStatusAsync(Projent.PMServer1.User user, Projent.PMServer1.Status status);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMainService/GetUserStatus", ReplyAction="http://tempuri.org/IMainService/GetUserStatusResponse")]
        System.Threading.Tasks.Task<System.Nullable<Projent.PMServer1.Status>> GetUserStatusAsync(string email);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMainService/RegisterUser", ReplyAction="http://tempuri.org/IMainService/RegisterUserResponse")]
        System.Threading.Tasks.Task<bool> RegisterUserAsync(string email, string name, byte[] imageBuffer, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMainService/FetchUsers", ReplyAction="http://tempuri.org/IMainService/FetchUsersResponse")]
        System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<Projent.PMServer1.User>> FetchUsersAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMainService/ValidateUser", ReplyAction="http://tempuri.org/IMainService/ValidateUserResponse")]
        System.Threading.Tasks.Task<bool> ValidateUserAsync(string email, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMainService/IsUserRegistered", ReplyAction="http://tempuri.org/IMainService/IsUserRegisteredResponse")]
        System.Threading.Tasks.Task<bool> IsUserRegisteredAsync(string email);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMainService/GetUser", ReplyAction="http://tempuri.org/IMainService/GetUserResponse")]
        System.Threading.Tasks.Task<Projent.PMServer1.User> GetUserAsync(string email, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMainService/UpdateUser", ReplyAction="http://tempuri.org/IMainService/UpdateUserResponse")]
        System.Threading.Tasks.Task<bool> UpdateUserAsync(Projent.PMServer1.User loggedUser, Projent.PMServer1.User tempUser, byte[] image);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMainService/RequestUserImage", ReplyAction="http://tempuri.org/IMainService/RequestUserImageResponse")]
        System.Threading.Tasks.Task<byte[]> RequestUserImageAsync(string username);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IMainServiceChannel : Projent.PMServer1.IMainService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class MainServiceClient : System.ServiceModel.ClientBase<Projent.PMServer1.IMainService>, Projent.PMServer1.IMainService {
        
        /// <summary>
        /// Implement this partial method to configure the service endpoint.
        /// </summary>
        /// <param name="serviceEndpoint">The endpoint to configure</param>
        /// <param name="clientCredentials">The client credentials</param>
        static partial void ConfigureEndpoint(System.ServiceModel.Description.ServiceEndpoint serviceEndpoint, System.ServiceModel.Description.ClientCredentials clientCredentials);
        
        public MainServiceClient(EndpointConfiguration endpointConfiguration) : 
                base(MainServiceClient.GetBindingForEndpoint(endpointConfiguration), MainServiceClient.GetEndpointAddress(endpointConfiguration)) {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public MainServiceClient(EndpointConfiguration endpointConfiguration, string remoteAddress) : 
                base(MainServiceClient.GetBindingForEndpoint(endpointConfiguration), new System.ServiceModel.EndpointAddress(remoteAddress)) {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public MainServiceClient(EndpointConfiguration endpointConfiguration, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(MainServiceClient.GetBindingForEndpoint(endpointConfiguration), remoteAddress) {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public MainServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public System.Threading.Tasks.Task IntializeDatabaseServiceAsync() {
            return base.Channel.IntializeDatabaseServiceAsync();
        }
        
        public System.Threading.Tasks.Task GetSqliteVersionAsync() {
            return base.Channel.GetSqliteVersionAsync();
        }
        
        public System.Threading.Tasks.Task<bool> RequestStateAsync(string DeviceID) {
            return base.Channel.RequestStateAsync(DeviceID);
        }
        
        public System.Threading.Tasks.Task<bool> SetUserStatusAsync(Projent.PMServer1.User user, Projent.PMServer1.Status status) {
            return base.Channel.SetUserStatusAsync(user, status);
        }
        
        public System.Threading.Tasks.Task<System.Nullable<Projent.PMServer1.Status>> GetUserStatusAsync(string email) {
            return base.Channel.GetUserStatusAsync(email);
        }
        
        public System.Threading.Tasks.Task<bool> RegisterUserAsync(string email, string name, byte[] imageBuffer, string password) {
            return base.Channel.RegisterUserAsync(email, name, imageBuffer, password);
        }
        
        public System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<Projent.PMServer1.User>> FetchUsersAsync() {
            return base.Channel.FetchUsersAsync();
        }
        
        public System.Threading.Tasks.Task<bool> ValidateUserAsync(string email, string password) {
            return base.Channel.ValidateUserAsync(email, password);
        }
        
        public System.Threading.Tasks.Task<bool> IsUserRegisteredAsync(string email) {
            return base.Channel.IsUserRegisteredAsync(email);
        }
        
        public System.Threading.Tasks.Task<Projent.PMServer1.User> GetUserAsync(string email, string password) {
            return base.Channel.GetUserAsync(email, password);
        }
        
        public System.Threading.Tasks.Task<bool> UpdateUserAsync(Projent.PMServer1.User loggedUser, Projent.PMServer1.User tempUser, byte[] image) {
            return base.Channel.UpdateUserAsync(loggedUser, tempUser, image);
        }
        
        public System.Threading.Tasks.Task<byte[]> RequestUserImageAsync(string username) {
            return base.Channel.RequestUserImageAsync(username);
        }
        
        public virtual System.Threading.Tasks.Task OpenAsync() {
            return System.Threading.Tasks.Task.Factory.FromAsync(((System.ServiceModel.ICommunicationObject)(this)).BeginOpen(null, null), new System.Action<System.IAsyncResult>(((System.ServiceModel.ICommunicationObject)(this)).EndOpen));
        }
        
        public virtual System.Threading.Tasks.Task CloseAsync() {
            return System.Threading.Tasks.Task.Factory.FromAsync(((System.ServiceModel.ICommunicationObject)(this)).BeginClose(null, null), new System.Action<System.IAsyncResult>(((System.ServiceModel.ICommunicationObject)(this)).EndClose));
        }
        
        private static System.ServiceModel.Channels.Binding GetBindingForEndpoint(EndpointConfiguration endpointConfiguration) {
            if ((endpointConfiguration == EndpointConfiguration.BasicHttpBinding_IMainService)) {
                System.ServiceModel.BasicHttpBinding result = new System.ServiceModel.BasicHttpBinding();
                result.MaxBufferSize = int.MaxValue;
                result.ReaderQuotas = System.Xml.XmlDictionaryReaderQuotas.Max;
                result.MaxReceivedMessageSize = int.MaxValue;
                result.AllowCookies = true;
                return result;
            }
            if ((endpointConfiguration == EndpointConfiguration.NetTcpBinding_IMainService)) {
                System.ServiceModel.NetTcpBinding result = new System.ServiceModel.NetTcpBinding();
                result.MaxBufferSize = int.MaxValue;
                result.ReaderQuotas = System.Xml.XmlDictionaryReaderQuotas.Max;
                result.MaxReceivedMessageSize = int.MaxValue;
                return result;
            }
            throw new System.InvalidOperationException(string.Format("Could not find endpoint with name \'{0}\'.", endpointConfiguration));
        }
        
        private static System.ServiceModel.EndpointAddress GetEndpointAddress(EndpointConfiguration endpointConfiguration) {
            if ((endpointConfiguration == EndpointConfiguration.BasicHttpBinding_IMainService)) {
                return new System.ServiceModel.EndpointAddress("http://20.92.239.229:8086/MainServiceReference");
            }
            if ((endpointConfiguration == EndpointConfiguration.NetTcpBinding_IMainService)) {
                return new System.ServiceModel.EndpointAddress(new System.Uri("net.tcp://20.92.239.229:8090/MainServiceReference"), new System.ServiceModel.UpnEndpointIdentity("UniProject\\Common"));
            }
            throw new System.InvalidOperationException(string.Format("Could not find endpoint with name \'{0}\'.", endpointConfiguration));
        }
        
        public enum EndpointConfiguration {
            
            BasicHttpBinding_IMainService,
            
            NetTcpBinding_IMainService,
        }
    }
}
